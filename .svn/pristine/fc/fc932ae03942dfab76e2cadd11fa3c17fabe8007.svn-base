/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FoodMart;

import com.jfoenix.controls.JFXPasswordField;
import com.jfoenix.controls.JFXTextField;
import com.jfoenix.validation.RequiredFieldValidator;
import dao.Customer;
import dao.CustomerDAO;
import dao.CustomerSession;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Admin
 */
public class MyAccountController {

    private Customer customer;
    CustomerDAO customerDao = new CustomerDAO();

    @FXML
    private GridPane paneEdit;

    @FXML
    private JFXTextField tfName;

    @FXML
    private JFXTextField tfEmail;

    @FXML
    private JFXPasswordField tfPwd;

    @FXML
    private JFXTextField tfAddress;

    @FXML
    private JFXTextField tfPhone;

    @FXML
    private JFXPasswordField tfNewPwd;

    @FXML
    private JFXPasswordField tfConfirmPwd;

    @FXML
    private Label noti;

    @FXML
    private VBox paneView;

    @FXML
    private Label txtName;

    @FXML
    private Label txtAddress;

    @FXML
    private Label txtPhone;

    @FXML
    private Label txtEmail;

    @FXML
    void goToHome(ActionEvent event) throws IOException {
        Navigator.getInstance().gotoHome();
    }

    @FXML
    void goToMyAccount(ActionEvent event) throws IOException {
        Navigator.getInstance().gotoMyAccount();
    }

    @FXML
    void gotoCart(ActionEvent event) throws IOException, SQLException {
        Navigator.getInstance().gotoCart();
    }

    @FXML
    void logout(ActionEvent event) throws IOException {
        CustomerSession.getInstance().clearCustomerSession();
        Navigator.getInstance().gotoLogin();
    }

    @FXML
    void edit(ActionEvent event) {
        noti.setText("");
        tfName.setText(customer.getFullName());
        tfEmail.setText(customer.getEmail());
        tfAddress.setText(customer.getAddress());
        tfPhone.setText(customer.getPhone());
        paneEdit.toFront();
    }

    @FXML
    void view(ActionEvent event) {
        txtName.setText(customer.getFullName());
        txtEmail.setText(customer.getEmail());
        txtAddress.setText(customer.getAddress());
        txtPhone.setText(customer.getPhone());
        paneView.toFront();
    }

    @FXML
    void save(ActionEvent event) throws NoSuchAlgorithmException {
        if (validate()) {
            customer.setFullName(tfName.getText());
            customer.setEmail(tfEmail.getText());
            customer.setAddress(tfAddress.getText());
            customer.setPhone(tfPhone.getText());
            if (!tfPwd.getText().equals("")) {
                if (customerDao.authenticateCustomer(sha1(tfPwd.getText()))) {
                    if (tfNewPwd.getText().equals(tfConfirmPwd.getText())) {
                        customer.setPassword(sha1(tfNewPwd.getText()));
                        boolean result = customerDao.update(customer);
                        if (result) {
                            noti.setText("Account details changed succesfully");
                        } else {
                            noti.setText("Some error happened. Changes are not applied.");
                        }
                    } else {
                        noti.setText("Passwords do not match");
                    }
                } else {
                    noti.setText("You entered the wrong password.");
                }
            } else {
                boolean result = customerDao.update(customer);
                if (result) {
                    noti.setText("Account details changed succesfully");
                } else {
                    noti.setText("Some error happened. Changes are not applied.");
                }
            }
        }
    }

    public String sha1(String input) throws NoSuchAlgorithmException {
        String sha1 = null;
        try {
            MessageDigest msdDigest = MessageDigest.getInstance("SHA-1");
            msdDigest.update(input.getBytes("UTF-8"), 0, input.length());
            sha1 = DatatypeConverter.printHexBinary(msdDigest.digest());
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
//        Logger.getLogger(Encriptacion.class.getName()).log(Level.SEVERE, null, e);
            System.err.println("sha1 error");
        }
        return sha1;
    }

    private boolean validate() {
        RequiredFieldValidator required = new RequiredFieldValidator();
        required.setMessage("Input Required");
        tfName.getValidators().add(required);
        tfAddress.getValidators().add(required);
        tfPhone.getValidators().add(required);
        tfEmail.getValidators().add(required);
        if (!tfPwd.getText().equals("") || !tfNewPwd.getText().equals("") || !tfConfirmPwd.getText().equals("")) {
            tfPwd.getValidators().add(required);
            tfNewPwd.getValidators().add(required);
            tfConfirmPwd.getValidators().add(required);
        }
        tfName.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfName.validate();
            }
        });
        tfAddress.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfAddress.validate();
            }
        });
        tfPhone.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfPhone.validate();
            }
        });
        tfEmail.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfEmail.validate();
            }
        });
        tfPwd.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfPwd.validate();
            }
        });
        tfNewPwd.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfNewPwd.validate();
            }
        });
        tfConfirmPwd.textProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != oldVal) {
                tfConfirmPwd.validate();
            }
        });
        return !(tfName.validate() == false || tfAddress.validate() == false || tfEmail.validate() == false || tfPhone.validate() == false || tfPwd.validate() == false || tfNewPwd.validate() == false || tfConfirmPwd.validate() == false);
    }

    public void initialize() throws SQLException {
        String email = CustomerSession.getInstance().getEmail();
        customer = customerDao.select(email);

        txtName.setText(customer.getFullName());
        txtEmail.setText(customer.getEmail());
        txtAddress.setText(customer.getAddress());
        txtPhone.setText(customer.getPhone());

    }
}
