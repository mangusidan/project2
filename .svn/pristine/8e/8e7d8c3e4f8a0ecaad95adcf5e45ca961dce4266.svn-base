/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FoodMart;

import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXDrawer;
import dao.Category;
import dao.CategoryDAO;
import dao.Product;
import dao.ProductDAO;
import de.jensd.fx.glyphs.fontawesome.FontAwesomeIconView;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.ImageView;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import com.jfoenix.controls.JFXTextField;
import dao.CustomerSession;
import dao.OrderDetail;
import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
import javafx.animation.FadeTransition;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.paint.Paint;
import javafx.util.Duration;

/**
 *
 * @author Admin
 */
public class HomeController {

    ProductDAO productDao = new ProductDAO();
    CategoryDAO categoryDao = new CategoryDAO();
    private ObservableList<Product> allProducts = CustomerSession.getInstance().getProducts();
    private static Stage popup = new Stage();

    static {
        Popup.getInstance().setStage(popup);
    }

    @FXML
    private JFXDrawer drawer;

    @FXML
    private JFXButton hbg;

    @FXML
    private HBox hbgWrapper;

    @FXML
    private ScrollPane scrollPane;

    @FXML
    private JFXTextField txtSearch;

    @FXML
    void logout(ActionEvent event) throws IOException {
        CustomerSession.getInstance().clearCustomerSession();
        Navigator.getInstance().gotoLogin();
    }

    @FXML
    void gotoHome(ActionEvent event) throws IOException {
        Navigator.getInstance().gotoHome();
    }

    @FXML
    void gotoCart(ActionEvent event) throws IOException, SQLException {
        Navigator.getInstance().gotoCart();
    }

    @FXML
    void gotoMyAccount(ActionEvent event) throws IOException {
        Navigator.getInstance().gotoMyAccount();
    }

    @FXML
    void hbgClick(ActionEvent event) {
        if (drawer.isClosed()) {
            drawer.open();
            drawer.toFront();
            hbg.setTranslateX(drawer.getWidth());
        } else {
            drawer.close();
            drawer.toBack();
            hbg.setTranslateX(0);
        }
    }

    @FXML
    void search(ActionEvent event) throws IOException, SQLException {
        if (!txtSearch.getText().equals("")) {
            Navigator.getInstance().gotoSearch(txtSearch.getText());
        }
    }
    
    EventHandler clickProduct = (EventHandler) (Event e) -> {
        try {
            Node clickedProduct = (Node) e.getSource();
            Integer productID = (Integer) clickedProduct.getUserData();
            Product product = productDao.select(productID);
            Popup.getInstance().gotoDetail(product);
            Popup.getInstance().getStage().show();
        } catch (SQLException ex) {
            Logger.getLogger(HomeController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomeController.class.getName()).log(Level.SEVERE, null, ex);
        }
    };

    private void showProducts(ObservableList<Product> products) {
        scrollPane.setContent(null);
        int col = 0, row = 0;
        GridPane gpProductsList = new GridPane();
        gpProductsList.getStyleClass().addAll("background-white", "gpProductsList");
        scrollPane.setContent(gpProductsList);

        for (int i = 0; i < 5; i++) {
            gpProductsList.getColumnConstraints().add(i, new ColumnConstraints());
        }
        gpProductsList.getColumnConstraints().forEach(column -> {
            column.setHgrow(Priority.ALWAYS);
        });

        for (Product p : products) {
            VBox vbox = new VBox(p.getProductId());
            VBox imageWrapper = new VBox();
            ImageView iv = new ImageView(p.getImage());
            iv.setFitWidth(200);
            iv.setFitHeight(200);
            iv.setPreserveRatio(true);
            iv.setSmooth(true);
            iv.setCache(true);
            iv.getStyleClass().addAll("hover-shadow", "hover-hand");
            iv.setUserData(p.getProductId());
            iv.setOnMouseClicked(clickProduct);
            imageWrapper.getChildren().add(iv);
            imageWrapper.setPrefHeight(200);
            imageWrapper.setAlignment(Pos.CENTER_LEFT);
            VBox detail = new VBox();
            Label name = new Label(p.getProductName());
            name.setMaxWidth(200);
            name.getStyleClass().addAll("productName", "hover-hand");
            name.setUserData(p.getProductId());
            name.setOnMouseClicked(clickProduct);
            DecimalFormat df = new DecimalFormat("#,###");
            Label price = new Label(df.format(p.getPriceProperty().get()) + " VND");
            price.getStyleClass().add("price");
            JFXButton addToCart = new JFXButton("Add to Cart");
            addToCart.getStyleClass().addAll("btn-primary", "hover-shadow", "hover-hand", "txt-white", "txt-bold");
            addToCart.setOnAction((event) -> {
                boolean existed = false;
                for (OrderDetail item : CustomerSession.getInstance().getCart()) {
                    if (item.getProductName().equals(p.getProductName())) {
                        item.setQuantity(item.getQuantity() + 1);
                        existed = true;
                        break;
                    }
                }
                if (!existed) {
                    OrderDetail newItem = new OrderDetail();
                    newItem.setProductId(p.getProductId());
                    newItem.setProductName(p.getProductName());
                    newItem.setQuantity(1);
                    newItem.setUnitPrice(p.getPrice());
                    CustomerSession.getInstance().getCart().add(newItem);
                    FontAwesomeIconView check = new FontAwesomeIconView(FontAwesomeIcon.CHECK);
                    check.setSize("15");
                    check.setFill(Paint.valueOf("white"));
                    addToCart.setGraphic(check);
                }
            });

            detail.getChildren().addAll(name, price, addToCart);
            detail.setSpacing(5);
            vbox.getChildren().addAll(imageWrapper, detail);
            GridPane.setConstraints(vbox, col, row);
            gpProductsList.getChildren().add(vbox);
            col++;
            if (col == 5) {
                row++;
                col = 0;
            }
        }
    }

    public void initialize() throws SQLException {
        VBox sideNav = new VBox();
        Label lbCategory = new Label("All categories", new FontAwesomeIconView());
        lbCategory.setStyle("-fx-background-color: #6ac2ee;-fx-font-size:17;-fx-text-fill:white");
        lbCategory.setPrefHeight(37);
        sideNav.getChildren().add(lbCategory);
        lbCategory.prefWidthProperty().bind(sideNav.widthProperty());
        ObservableList<Category> categories = categoryDao.selectAll();
        for (Category category : categories) {
            JFXButton btnCategory = new JFXButton(category.getCategoryName());
            btnCategory.getStyleClass().addAll("hover-hand", "categoryName");
            btnCategory.setUserData(category);
            btnCategory.setOnAction(e -> {
                JFXButton clickedCategory = (JFXButton) e.getSource();
                Category c = (Category) clickedCategory.getUserData();
                try {
                    Navigator.getInstance().gotoBrowse(c);
                } catch (IOException ex) {
                    System.err.println(ex.getMessage());
                } catch (SQLException ex) {
                    Logger.getLogger(HomeController.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            btnCategory.setAlignment(Pos.CENTER_LEFT);
            sideNav.getChildren().add(btnCategory);
            btnCategory.prefWidthProperty().bind(sideNav.widthProperty());
        }

        drawer.setSidePane(sideNav);
        drawer.toBack();

        showProducts(allProducts);
    }
}
